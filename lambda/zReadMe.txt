Лямбда, по сути, это просто короткая запись имплементации функционального интерфейса.
Функциональные интерфейсы - интерфейсы имеющие всего один абстрактный метод.
Java Lambda Syntax:
-   n -> System.out.print()
-   (String n) -> System.out.print(n)
-   (String n) -> {System.out.print(n);}
С левой стороны выражения записываются переменные и тип этой переменной (не всегда) — это переменные
    , которые являются аргументами метода функционального интерфейса, то есть то, что метод требует в качестве
    своих параметров.
Символ -> — просто указатель, что это лямбда выражение.
В конце — тело метода, то есть код, который должен исполниться, когда метод будет вызван.

Левая часть выражения:
-   Нет переменных                              Всегда в скобках            () -> new Integer(12);
-   Одна переменная без указанного типа         s -> s.contains("m")        s -> s.contains("m")
    Может быть в скобках или без                                            (s) -> s.contains("m")
-   Одна переменная с указанным типом           Всегда в скобках            (String s) -> s.length()
-   Несколько переменных одного типа            Всегда в скобках            (s, t) -> s + t
    без указания типа
-   Несколько переменных с указанными типами    Всегда в скобках            (String a, int b) -> a.substring(b)

Правая часть выражения:
-   Одна строка кода                Может быть в блоке кода, а может        (int b) -> b + 12
                                    быть записано упрощенно                 (int b) -> System.out.print(b)
                                                                            (int b) -> System.out.print(b)
-   Несколько строк кода и/или      Только в блоке кода                     (String s) -> {return s.length();}
    присутствует ключевое слово                                             (String s) -> {
    return                                                                      System.out.print(s);
                                                                                return s;
                                                                            }
Также важно помнить ещё несколько правил:
-   Нельзя переопределять переменную, которая стоит слева в выражении, в теле метода: (int b) -> {b = 4; return b + 12;} не скомпилируется.
-   У лямбды есть доступ к локальным переменным метода, в котором она написана, а также к параметрам этого метода,
    но эти переменные должны быть «эффективно финальными» (то есть такими переменными, к которым можно добавить
    ключевое слово final без ошибки компиляции).

Литература:
SOLID https://www.baeldung.com/solid-principles