-   synchronized - сделать метод атомарным т.е. не делимым, поток блокирует объект или класс объекта в зависимости от того,
    является ли метод статическим.
-   Пример [Bank] - демонстрация несинхронизированных методов
    [Bank1] синхронизация и проверка значения
    [Bank2] AtomicInteger
-   Пример [BankStatic] - демонстрация синхронизированных static методов
-   Пример [Worker] - демонстрация взаимной блокировки
-   Пример [WorkerFix] - решение проблемы взаимной блокировки synchronized(Object) как вариант synchronized(this)
-   synchronized - заблокировать объект (класс, экземпляр класса, объект внутри метода)
-   volatile - указание JVM не сохранять и читать из КЭШ памяти потока, всегда сохранять и читать из общей памяти
    Тогда все изменения из вне 100% будут видны потоку.
-   [immutable]
    [BankInteger]   -   пример проблемы блокировки объекта Immutable класса
-   [Fox] - пример deadlock
Проблемы многопоточности:
-   Liveness-проблемы — это такие проблемы, из-за которых приложение становится «зависающим» и «заторможенным». На практике такие проблемы бывает очень сложно отловить.
-   [DeadLock, DeadLock1, DeadLock2, Deadlock3, Deadlock4] - пример DeadLock с решениями
    ! Вопрос: есть ли у synchronized реализация с ожиданием и выбрасыванием DeadlockException?
-   Проблема Race condition пример [Bank, Bank1]
Итоги:
-   Итак, во избежание различных нежелательных результатов работы в многопоточной среде, всегда синхронизируйте доступ
    к общим ресурсам, обеспечивайте верный порядок работы потоков и предотвращайте возможность deadlocks
    , livelocks и starvation на этапе проектирования приложений.