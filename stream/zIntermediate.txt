Промежуточные операции стрима всегда будут возвращать новый объект типа Stream, они не исполнятся до тех пор, пока не вызывается конечная операция.
Использование распространенных промежуточных операций:

Метод:	                                                    Описание:
-   Stream<T> filter(Predicate<? super T> predicate);       Возвращает новый стрим, содержащий элементы, которые подходят передаваемому условию.
-   Stream<T> distinct();                                   Возвращает новый стрим с уникальными элементами из предыдущего стрима.
-   Stream<T> limit(long maxSize);                          Сокращает стрим:
    Stream<T> skip(long n);                                     1. Устанавливает лимит на количество проходящих элементов.
                                                                2. Пропускает (не обрабатывает) определенное количество элементов.
-   <R> Stream<R> map(Function<? super T                    Трансформирует элементы стрима из одного типа в другой.
    , ? extends R> mapper);
-   <R> Stream<R> flatMap(Function<? super T                Трансформирует элементы стрима типа Stream в объекты параметризованного типа этих стримов.
    , ? extends Stream<? extends R>> mapper);               Проще говоря, если у нас первоначальный стрим состоит из элементов, которые сами по себе
                                                            могут быть обращены в стримы (например, lists), то мы трансформируем все эти стримы в один общий стрим.
-   Stream<T> sorted();                                     Возвращает отсортированный стрим. Если мы не определили Comparator,
    Stream<T> sorted(Comparator<? super T> comparator);     тогда сортируются только те типы, которые имплементируют Comparable, иначе — ошибка в Runtime.
