Правила Immutable класса

Примеры: String, Integer - не изменяются, а создаются новые экзкмпляры объектов
-   Если объект Immutable synchronized не поможет, т.к. какждый раз создается и блокируется новый объект

1.  Используйте конструктор, чтобы установить значения всех полей объекта.
    Нам нужно определить все параметры будущего объекта в конструкторе
    , так как после этого будет невозможно изменять поля.
2.  Обозначьте все переменные объекта ключевыми словами private и final (private — для инкапсуляции переменных
    , final — чтобы не было возможности внутри класса случайно переопределить ссылочную переменную).
3.  Не определяйте никаких setter-ов. По понятным причинам — объект должен быть неизменяем на протяжении всего жизненного цикла.
4.  Не возвращайте при запросах ссылки на изменяемые объекты внутри неизменяемого объекта
    , создавайте копию и возвращайте её.
5.  Предотвратите возможность для переопределения методов. Представьте, что это было бы разрешено.
    Тогда возможно унаследовать immutable класс и переопределить его так, чтобы была возможность видоизменять другие переменные
    в унаследованном классе, таким образом скрывая private-переменные родительского класса.

!   Зачем вообще immutable-объекты? В многопоточной среде очень даже есть зачем!
    Такие объекты не требуют никакой синхронизации в многопоточном приложении.
    Такой тип ещё называют read-only типом (с англ. «только для чтения»). Мы можем, например
    , такие объекты передавать в методы и быть уверены, что они точно не изменятся из кода другого потока.